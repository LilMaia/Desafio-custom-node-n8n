# PowerShell setup script for Windows

Write-Host "üöÄ Iniciando setup do n8n Custom Random Node..." -ForegroundColor Green

# Verificar se Docker est√° instalado
if (-not (Get-Command docker -ErrorAction SilentlyContinue)) {
    Write-Host "‚ùå Docker n√£o est√° instalado. Por favor, instale o Docker Desktop primeiro." -ForegroundColor Red
    Write-Host "   Download: https://www.docker.com/products/docker-desktop/" -ForegroundColor Yellow
    exit 1
}

# Verificar se Node.js est√° instalado
if (-not (Get-Command node -ErrorAction SilentlyContinue)) {
    Write-Host "‚ùå Node.js n√£o est√° instalado. Por favor, instale o Node.js 22 primeiro." -ForegroundColor Red
    exit 1
}

# Verificar vers√£o do Node.js
$nodeVersion = (node -v).Substring(1).Split('.')[0]
if ([int]$nodeVersion -lt 18) {
    Write-Host "‚ùå Vers√£o do Node.js muito antiga. Por favor, instale o Node.js 18+ ou 22 (LTS)." -ForegroundColor Red
    exit 1
}

Write-Host "‚úÖ Depend√™ncias verificadas!" -ForegroundColor Green

# Instalar depend√™ncias do custom node
Write-Host "üì¶ Instalando depend√™ncias do custom node..." -ForegroundColor Cyan
Set-Location "n8n-custom-random-node"
npm install

if ($LASTEXITCODE -ne 0) {
    Write-Host "‚ùå Erro ao instalar depend√™ncias do npm." -ForegroundColor Red
    exit 1
}

# Compilar o custom node
Write-Host "üî® Compilando o custom node..." -ForegroundColor Cyan
npm run build

if ($LASTEXITCODE -ne 0) {
    Write-Host "‚ùå Erro ao compilar o custom node." -ForegroundColor Red
    exit 1
}

Set-Location ".."

# Copiar arquivo .env se n√£o existir
if (-not (Test-Path ".env")) {
    Write-Host "üìù Criando arquivo .env..." -ForegroundColor Cyan
    Copy-Item ".env.example" ".env"
}

# Iniciar os servi√ßos Docker
Write-Host "üê≥ Iniciando servi√ßos Docker..." -ForegroundColor Cyan

# Tentar docker compose primeiro (vers√£o mais nova), depois docker-compose
$dockerComposeCmd = $null
if (Get-Command "docker" -ErrorAction SilentlyContinue) {
    try {
        docker compose version 2>$null
        if ($LASTEXITCODE -eq 0) {
            $dockerComposeCmd = "docker compose"
        }
    } catch {}
}

if (-not $dockerComposeCmd -and (Get-Command "docker-compose" -ErrorAction SilentlyContinue)) {
    $dockerComposeCmd = "docker-compose"
}

if (-not $dockerComposeCmd) {
    Write-Host "‚ùå Docker Compose n√£o est√° dispon√≠vel. Verifique se o Docker Desktop est√° instalado e executando." -ForegroundColor Red
    exit 1
}

Write-Host "   Usando: $dockerComposeCmd" -ForegroundColor Gray
Invoke-Expression "$dockerComposeCmd up -d"

if ($LASTEXITCODE -ne 0) {
    Write-Host "‚ùå Erro ao iniciar os servi√ßos Docker." -ForegroundColor Red
    exit 1
}

Write-Host ""
Write-Host "üéâ Setup conclu√≠do com sucesso!" -ForegroundColor Green
Write-Host ""
Write-Host "üìã Pr√≥ximos passos:" -ForegroundColor Yellow
Write-Host "   1. Aguarde alguns segundos para os servi√ßos inicializarem"
Write-Host "   2. Acesse http://localhost:5678"
Write-Host "   3. Fa√ßa login com:"
Write-Host "      Usu√°rio: admin"
Write-Host "      Senha: admin123"
Write-Host "   4. Crie um novo workflow e adicione o node 'Random'"
Write-Host ""
Write-Host "üîß Comandos √∫teis:" -ForegroundColor Yellow
Write-Host "   $dockerComposeCmd logs -f n8n     # Ver logs do n8n"
Write-Host "   $dockerComposeCmd logs -f postgres # Ver logs do PostgreSQL"
Write-Host "   $dockerComposeCmd stop            # Parar os servi√ßos"
Write-Host "   $dockerComposeCmd down            # Parar e remover containers"
Write-Host ""